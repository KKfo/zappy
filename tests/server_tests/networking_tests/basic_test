#!/usr/bin/env	python3
#
#               Basic test for zappy server
#

import unittest
import codecs
import sys
import fcntl, os
import errno
import socket
import subprocess
from time import sleep
import random

class test_parser_commands(unittest.TestCase):
    buffer_size = 1024
    port = 3000
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    def setUp(self):
        
        testName = self.shortDescription()
        if testName == 'first':
            #subprocess.call("./bin/basic_test_bin 3000 &", shell=True)
            self.connect()
        
    def tearDown(self):

        testName = self.shortDescription()
        if testName == 'last':
            self.s.close()
            #subprocess.call("killall -s 2 basic_test_bin", shell=True)

    def test_a(self):
        """first"""
        sleep(.01)
        data = codecs.decode(self.s.recv(self.buffer_size))
        self.assertEqual(data, 'BIENVENUE\n1\n0 0\n')

    def test_all_commands(self):
        """All comands"""
        self.s.send(codecs.encode('avance\n'))
        self.s.send(codecs.encode('droite\n'))
        self.s.send(codecs.encode('gauche\n'))
        self.s.send(codecs.encode('voir\n'))
        self.s.send(codecs.encode('inventaire\n'))
        # self.s.send(codecs.encode('incantation\n'))
        self.s.send(codecs.encode('prend stone\n'))
        self.s.send(codecs.encode('pose stone\n'))
        self.s.send(codecs.encode('expulse\n'))
        self.s.send(codecs.encode('fork\n'))
        # self.s.send(codecs.encode('connect_nbr\n'))
        sleep(1)
        data = codecs.decode(self.s.recv(self.buffer_size))
        self.assertEqual(data, 'Avance\n'*9)

    # def test_all_incomplete_commands(self):
    #     """All comands incomplete"""
    #     i = 0
    #     while i < 20000:
    #         self.s.send(codecs.encode('av'))
    #         self.s.send(codecs.encode('avance\n'))
    #         self.s.send(codecs.encode('dro'))
    #         self.s.send(codecs.encode('ite\n'))
    #         self.s.send(codecs.encode('gauc'))
    #         self.s.send(codecs.encode('he\n'))
    #         self.s.send(codecs.encode('vo'))
    #         self.s.send(codecs.encode('ir\n'))
    #         self.s.send(codecs.encode('inven'))
    #         self.s.send(codecs.encode('ta'))
    #         self.s.send(codecs.encode('ire\n'))
    #         self.s.send(codecs.encode('in'))
    #         self.s.send(codecs.encode('canta'))
    #         self.s.send(codecs.encode('tion\n'))
    #         self.s.send(codecs.encode('prend stone\n'))
    #         self.s.send(codecs.encode('pose stone\n'))
    #         self.s.send(codecs.encode('ex'))
    #         self.s.send(codecs.encode('pulse\n'))
    #         self.s.send(codecs.encode('fork'))
    #         self.s.send(codecs.encode('\n'))
    #         self.s.send(codecs.encode('connec'))
    #         self.s.send(codecs.encode('t_nbr\n'))
    #         i += 1
    #         #sleep(.04)
    #         data = codecs.decode(self.s.recv(self.buffer_size))
    #         print(data)
    #     sleep(10)
    #     data = codecs.decode(self.s.recv(40960))
        #self.assertEqual(data, 'Avance\n' * 11)
        
    # def test_valid_after_invalid(self):
        
    #     self.s.send(codecs.encode('msmsmmd\n' * 200000))
    #     self.s.send(codecs.encode('mmmavance\nsdf'))
    #     self.s.send(codecs.encode('msmsmmd\n' * 200000))
    #     sleep(.1)
    #     data = codecs.decode(self.s.recv(self.buffer_size))
    #     self.assertEqual(data, 'Avance\n')

    # def test_valid_after_incomplete(self):
        
    #     self.s.send(codecs.encode('pomsmsmmd\n' * 20000))
    #     self.s.send(codecs.encode(('z'*1020)+'ava'))
    #     self.s.send(codecs.encode(('p'*1000000)+'avance\n'))
    #     sleep(.1)
    #     data = codecs.decode(self.s.recv(self.buffer_size))
    #     self.assertEqual(data, 'Avance\n')

    def test_zlast(self):
        """last"""

    def connect(self):
        self.s.connect(('127.0.0.1', self.port))
        #fcntl.fcntl(self.s, fcntl.F_SETFL, os.O_NONBLOCK)
        return

if __name__ == "__main__":
    unittest.main()
